# GitLab CI/CD Pipeline for Go Eloquent ORM
# Runs tests on push and merge requests to main branch

stages:
  - test
  - build
  - deploy

variables:
  GO_VERSION: "1.21"
  CGO_ENABLED: "1"

# Cache Go modules for faster builds
cache:
  paths:
    - .cache/go-build/
    - .cache/go-mod/

# Test job with SQLite (primary testing database)
test:sqlite:
  stage: test
  image: golang:${GO_VERSION}-alpine
  before_script:
    - apk add --no-cache git gcc musl-dev sqlite
    - export GOCACHE=$PWD/.cache/go-build
    - export GOMODCACHE=$PWD/.cache/go-mod
    - go version
    - go mod download
  script:
    - echo "Running core tests with SQLite..."
    - go test -v ./tests/model_test.go
    - go test -v ./tests/integration/integration_test.go
    - go test -v ./querybuilder_test.go
    - go test -v ./relationships_test.go
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  artifacts:
    when: always
    reports:
      junit: report.xml
    paths:
      - coverage.html
    expire_in: 1 week

# Test job with PostgreSQL (extended testing)
test:postgresql:
  stage: test
  image: golang:${GO_VERSION}-alpine
  services:
    - name: postgres:15-alpine
      alias: postgres
  variables:
    POSTGRES_DB: test_db
    POSTGRES_USER: test_user
    POSTGRES_PASSWORD: test_password
    POSTGRES_HOST_AUTH_METHOD: trust
  before_script:
    - apk add --no-cache git gcc musl-dev postgresql-client
    - export GOCACHE=$PWD/.cache/go-build
    - export GOMODCACHE=$PWD/.cache/go-mod
    - go version
    - go mod download
    # Wait for PostgreSQL to be ready
    - until pg_isready -h postgres -p 5432 -U test_user; do echo "Waiting for PostgreSQL..."; sleep 2; done
    - sleep 5  # Additional wait for full initialization
  script:
    - echo "Running tests with PostgreSQL..."
    - export DB_DRIVER=postgres
    - export DB_HOST=postgres
    - export DB_PORT=5432
    - export DB_DATABASE=test_db
    - export DB_USERNAME=test_user
    - export DB_PASSWORD=test_password
    - go test -v ./tests/model_test.go
    - go test -v ./tests/integration/integration_test.go
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  allow_failure: true

# Test job with MySQL (extended testing)
test:mysql:
  stage: test
  image: golang:${GO_VERSION}-alpine
  services:
    - name: mysql:8.0
      alias: mysql
      command: ["--default-authentication-plugin=mysql_native_password"]
  variables:
    MYSQL_ROOT_PASSWORD: root_password
    MYSQL_DATABASE: test_db
    MYSQL_USER: test_user
    MYSQL_PASSWORD: test_password
  before_script:
    - apk add --no-cache git gcc musl-dev mysql-client
    - export GOCACHE=$PWD/.cache/go-build
    - export GOMODCACHE=$PWD/.cache/go-mod
    - go version
    - go mod download
    # Wait for MySQL to be ready
    - until mysqladmin ping -h mysql -u test_user -ptest_password --silent; do echo "Waiting for MySQL..."; sleep 2; done
    - sleep 5  # Additional wait for full initialization
  script:
    - echo "Running tests with MySQL..."
    - export DB_DRIVER=mysql
    - export DB_HOST=mysql
    - export DB_PORT=3306
    - export DB_DATABASE=test_db
    - export DB_USERNAME=test_user
    - export DB_PASSWORD=test_password
    - go test -v ./tests/model_test.go
    - go test -v ./tests/integration/integration_test.go
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  allow_failure: true

# Code quality checks
quality:
  stage: test
  image: golang:${GO_VERSION}-alpine
  before_script:
    - apk add --no-cache git gcc musl-dev
    - export GOCACHE=$PWD/.cache/go-build
    - export GOMODCACHE=$PWD/.cache/go-mod
    - go install golang.org/x/tools/cmd/goimports@latest
    - go install honnef.co/go/tools/cmd/staticcheck@latest
  script:
    - echo "Running code quality checks..."
    - go fmt ./...
    - go vet ./...
    - staticcheck ./...
    - goimports -l .
    - |
      if [ -n "$(goimports -l .)" ]; then
        echo "Code is not properly formatted. Please run 'goimports -w .'"
        exit 1
      fi
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  allow_failure: true

# Security scan
security:
  stage: test
  image: golang:${GO_VERSION}-alpine
  before_script:
    - apk add --no-cache git gcc musl-dev
    - export GOCACHE=$PWD/.cache/go-build
    - export GOMODCACHE=$PWD/.cache/go-mod
    - go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
  script:
    - echo "Running security scan..."
    - gosec -fmt json -out gosec-report.json ./...
    - gosec ./...
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  artifacts:
    paths:
      - gosec-report.json
    expire_in: 1 week
  allow_failure: true

# Build verification
build:
  stage: build
  image: golang:${GO_VERSION}-alpine
  before_script:
    - apk add --no-cache git gcc musl-dev
    - export GOCACHE=$PWD/.cache/go-build
    - export GOMODCACHE=$PWD/.cache/go-mod
    - go version
    - go mod download
  script:
    - echo "Building Go Eloquent ORM..."
    - go build -v ./...
    - echo "Build completed successfully"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  needs:
    - job: test:sqlite
      artifacts: false

# Coverage report (runs only on main branch)
coverage:
  stage: test
  image: golang:${GO_VERSION}-alpine
  before_script:
    - apk add --no-cache git gcc musl-dev sqlite
    - export GOCACHE=$PWD/.cache/go-build
    - export GOMODCACHE=$PWD/.cache/go-mod
    - go version
    - go mod download
  script:
    - echo "Generating coverage report..."
    - go test -coverprofile=coverage.out ./tests/...
    - go tool cover -html=coverage.out -o coverage.html
    - go tool cover -func=coverage.out | tee coverage.txt
    - |
      COVERAGE=$(go tool cover -func=coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+')
      echo "Total coverage: ${COVERAGE}%"
      if [ $(echo "${COVERAGE} < 70" | bc -l) -eq 1 ]; then
        echo "Coverage is below 70%. Current coverage: ${COVERAGE}%"
        exit 1
      fi
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  coverage: '/total:\s+\(statements\)\s+(\d+\.\d+)%/'
  artifacts:
    paths:
      - coverage.out
      - coverage.html
      - coverage.txt
    expire_in: 1 week

# Performance benchmarks (runs only on main)
benchmark:
  stage: test
  image: golang:${GO_VERSION}-alpine
  before_script:
    - apk add --no-cache git gcc musl-dev sqlite
    - export GOCACHE=$PWD/.cache/go-build
    - export GOMODCACHE=$PWD/.cache/go-mod
    - go version
    - go mod download
  script:
    - echo "Running performance benchmarks..."
    - go test -bench=. -benchmem ./tests/... > benchmark.txt || echo "No benchmarks found"
    - cat benchmark.txt
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  artifacts:
    paths:
      - benchmark.txt
    expire_in: 1 week
  allow_failure: true

# Documentation generation (runs only on main)
docs:
  stage: deploy
  image: golang:${GO_VERSION}-alpine
  before_script:
    - apk add --no-cache git gcc musl-dev
    - export GOCACHE=$PWD/.cache/go-build
    - export GOMODCACHE=$PWD/.cache/go-mod
    - go install golang.org/x/tools/cmd/godoc@latest
  script:
    - echo "Generating documentation..."
    - go doc -all . > docs.txt
    - echo "Documentation generated"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  artifacts:
    paths:
      - docs.txt
    expire_in: 1 week
  allow_failure: true

# Cleanup job
cleanup:
  stage: .post
  image: alpine:latest
  script:
    - echo "Pipeline completed for commit $CI_COMMIT_SHA"
    - echo "Branch: $CI_COMMIT_BRANCH"
    - echo "Pipeline URL: $CI_PIPELINE_URL"
  when: always 